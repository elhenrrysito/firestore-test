// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package inject

import (
	"cloud.google.com/go/firestore"
	"firestore-test/internal/core"
	"firestore-test/internal/core/service"
	firestore2 "firestore-test/internal/infra/config/firestore"
	"firestore-test/internal/infra/config/instance"
	sale2 "firestore-test/internal/infra/primary/sale"
	"firestore-test/internal/infra/secondary/persistence/sale"
	"fmt"
	"github.com/google/wire"
	"gopkg.in/yaml.v3"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sync"
)

// Injectors from inject.go:

// --- Injector Function ---
func InitializeApp() (*instance.GinController, error) {
	properties, err := ProvideProperties()
	if err != nil {
		return nil, err
	}
	firestoreProperty := ProvideFirestoreProperty(properties)
	client, err := ProvideFirestoreClient(firestoreProperty)
	if err != nil {
		return nil, err
	}
	applicationConfig := ProvideApplicationProperty(properties)
	salePersistencePort := ProvideSalePersistence(client, applicationConfig, firestoreProperty)
	saleUseCaseHandler := ProvideSaleService(salePersistencePort)
	controller := ProvideSaleController(saleUseCaseHandler, salePersistencePort)
	serverConfig := ProvideServerProperty(properties)
	ginController := ProvideGinController(controller, serverConfig)
	return ginController, nil
}

// inject.go:

type ApplicationProperty struct {
	BusinessName string `yaml:"business-name"`
}

type ApplicationConfig struct {
	Application ApplicationProperty `yaml:"application"`
}

type FirestoreCollection struct {
	Namespace      string `yaml:"namespace"`
	ProjectID      string `yaml:"project-id"`
	CollectionName string `yaml:"collection-name"`
}

type FirestoreConfig struct {
	Sales FirestoreCollection `yaml:"sales"`
}

type FirestoreProperty struct {
	Firestore FirestoreConfig `yaml:"firestore"`
}

type ServerConfig struct {
	Port string `yaml:"port"`
}

type ServerProperty struct {
	Server ServerConfig `yaml:"server"`
}

// Combined Properties struct
type Properties struct {
	ApplicationConfig ApplicationConfig `yaml:"application"`
	FirestoreProperty FirestoreProperty `yaml:"firestore"`
	ServerProperty    ServerProperty    `yaml:"server"`
}

var (
	onceProperties sync.Once
	props          *Properties
)

// loadProperties reads properties from the YAML file and substitutes environment variables.
func loadProperties() (*Properties, error) {
	onceProperties.Do(func() {
		var p Properties
		absPath, err := filepath.Abs("internal/resources/properties.yml")
		if err != nil {
			log.Fatalf("error getting absolute path for properties: %v", err)
			return
		}

		yamlFile, err := ioutil.ReadFile(absPath)
		if err != nil {
			log.Fatalf("error reading properties.yml: %v", err)
			return
		}

		expandedYaml := os.ExpandEnv(string(yamlFile))

		err = yaml.Unmarshal([]byte(expandedYaml), &p)
		if err != nil {
			log.Fatalf("error unmarshalling properties.yml: %v", err)
			return
		}
		props = &p
	})
	if props == nil {

		return nil, fmt.Errorf("properties were not loaded")
	}
	return props, nil
}

func ProvideProperties() (*Properties, error) {
	return loadProperties()
}

func ProvideServerProperty(p *Properties) *ServerConfig {
	return &p.ServerProperty.Server
}

func ProvideApplicationProperty(p *Properties) *ApplicationConfig {
	return &p.ApplicationConfig
}

func ProvideFirestoreProperty(p *Properties) *FirestoreProperty {
	return &p.FirestoreProperty
}

// PropertyProviderSet combines all property related providers.
var PropertyProviderSet = wire.NewSet(
	ProvideProperties,
	ProvideServerProperty,
	ProvideApplicationProperty,
	ProvideFirestoreProperty,
)

// --- Firestore Client Provider ---
func ProvideFirestoreClient(fp *FirestoreProperty) (*firestore.Client, error) {

	if _, err := ProvideProperties(); err != nil {
		return nil, fmt.Errorf("failed to load properties before creating firestore client: %w", err)
	}

	return firestore2.NewFirestoreClient(fp.Firestore.Sales.ProjectID), nil
}

// --- Persistence Provider ---
// Depends on the refactored NewRepository
func ProvideSalePersistence(
	client *firestore.Client,
	appConfig *ApplicationConfig,
	firestoreConfig *FirestoreProperty,
) core.SalePersistencePort {
	return sale.NewRepository(
		client,
		firestoreConfig.Firestore.Sales.CollectionName,
		appConfig.Application.BusinessName,
		firestoreConfig.Firestore.Sales.Namespace,
	)
}

// --- Service Provider ---
func ProvideSaleService(persistencePort core.SalePersistencePort) core.SaleUseCaseHandler {
	return service.NewSaleService(persistencePort)
}

// --- Controller Provider ---
func ProvideSaleController(useCase core.SaleUseCaseHandler, persistencePort core.SalePersistencePort) *sale2.Controller {
	return sale2.NewController(useCase, persistencePort)
}

// --- GinController (Runnable) Provider ---
// Provider for GinController. Note: instance.GinController and its interface ControllerRunnable will be modified.
func ProvideGinController(saleCtrl *sale2.Controller, serverProps *ServerConfig) *instance.GinController {

	runnables := []instance.ControllerRunnable{saleCtrl}

	return instance.NewGinController(runnables, fmt.Sprintf(":%s", serverProps.Port))
}

// AppProviderSet combines all application providers.
var AppProviderSet = wire.NewSet(
	PropertyProviderSet,
	ProvideFirestoreClient,
	ProvideSalePersistence,
	ProvideSaleService,
	ProvideSaleController,
	ProvideGinController,
)
